#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define PHILOSOPHERS 5
sem_t mutex, chopsticks[PHILOSOPHERS];

void* philosopher(void* num) {
    int id = *(int*)num;
    while(1) {
        sem_wait(&mutex); // Enter critical section
        sem_wait(&chopsticks[id]);
        sem_wait(&chopsticks[(id+1)%PHILOSOPHERS]);
        sem_post(&mutex); // Exit critical section
        printf("Philosopher %d is eating\n", id);
        sem_post(&chopsticks[id]);
        sem_post(&chopsticks[(id+1)%PHILOSOPHERS]);
        printf("Philosopher %d is thinking\n", id);
    }
    return NULL;
}

int main() {
    pthread_t threads[PHILOSOPHERS];
    int ids[PHILOSOPHERS];
    sem_init(&mutex, 0, 1);
    for(int i = 0; i < PHILOSOPHERS; i++) {
        sem_init(&chopsticks[i], 0, 1);
        ids[i] = i;
        pthread_create(&threads[i], NULL, philosopher, &ids[i]);
    }
    for(int i = 0; i < PHILOSOPHERS; i++) pthread_join(threads[i], NULL);
    return 0;
}
